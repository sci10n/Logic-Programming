% -*- compile-command: "pdflatex cyd.tex"; eval: (compile-on-save-mode) -*-

\documentclass[a4paper,6pt]{article}

\usepackage[a4paper, total={6in, 8in}]{geometry}
\usepackage[utf8]{inputenc}
\usepackage[swedish]{babel}
\usepackage{enumerate}
\usepackage{hyperref}

\begin{document}

\section{Notes - TDDD08}

\textbf{Unification in Prolog}

\begin{enumerate}
  \item term1 and term2 are constants then they unifiy if they are the same constant or number
  \item term1 is a variable and term2 is any type of term term1 unify with term2. same other way around and if both are variables the substitutes to each other and term1 = term2
  \item If both are complex terms they unify if
  \begin{enumerate}
    \item They have the same functor and arrity,
    \item All their arguments unify,
    \item The variable instantiations are compatible.
  \end{enumerate}
\end{enumerate}
Prolog cheats and doesnâ€™t use a full unification algorithm for example : \( a(X) = X \) unifies because of the second clause but does no in theory. To combat this one can specify occur checks in prolog.

\textbf{Program specification}

Example:
\begin{equation}
  S = { split(l,l_1,l_2) \epsilon \mathbf{B}_{A} | l_1,l_2\ are\ lists, |l_1|-|l_2| \epsilon {0,1} }
\end{equation}
Proving S:
for every ground instance of a clause, if each body atom is in S then the head must be in S.
\begin{equation}
  split( [h|t],[h|t_2],t_1) \leftarrow split(t,t1,t2)
\end{equation}
assume \( split(t,t_1,t_2) \epsilon S \) means \( |l_1|-|l_2| \epsilon \{ 0,1 \} \) meaning \( |[h|t_2]  - |t_1| = 1+ | t_2| - |t_1| \epsilon \{1-0,1-1\} \)

\textbf{SLDNF - forest}
Do regular SLD - tree but break into a new tree for each negation.

Finitely failed means a finite tree with no answer substitutions
Floundering means anything that doesn't terminate.

\textbf{Program completion}
Convert clauses and add qualifiers
\begin{itemize}
 \item \( s(L,M) \leftrightarrow \sim ns(L,M) \)
 \item \( ns(L,M) \leftrightarrow \exists_X m(X,L)\, \sim m(X,M))) \)
 \item \( m(X,L^{'}) \leftrightarrow \exists_L(L^{'} = [X|L]) \vee \exists_{Y,L}(L^{'} = [Y|L]\, m(X,L)) ))\)
\end{itemize}
Insert the queries to test and check if the logic holds true. if it's true comp(program) \models query.

\textbf{Herbrand interpretation}
\begin{itemize}
  \item Universe: \( U_A \) is collection of all constants and function symbols.
  \item Base: \( B_A = \{ predicate(p) | p \epsilon U_A \} \cup \{predicate2(p) | p2 \epsilon U_A\}\)
  \item Least Model: \( M_P = \{ A \epsilon B_A | P \models  A \}\)
\end{itemize}


\textbf{PTR}
  \begin{itemize}
    \item \( PTR_0 = \{ gt(t) |t is a term\} \)
    \item \( PTR_1  = \{all\ terms\ proven\ with\ PTR_0\} U PTR_0 \)
    \item General proof is done with inference, prove \( PTR_{0}, PTR_{1} \), etc, until general pattern, then prove \(PTR_K \) and then \(PTR_{K + 1} \). Remember to specify bounds of K.
  \end{itemize}

\textbf{Extra bits}
\begin{itemize}
\item Soundnes means all computed answers are logical consequences of a program.
\item Completenes means that all logical consequences of a program are is a computed answer.
\end{itemize}
\end{document}
